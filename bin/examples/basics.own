let id : (A : Type) → A → A
       = λ A x . x
in (id Type Bool, id Bool False)

----

False

----

let id
    : (A : Type) → A → A
    = λ A x . x
in
let typid
    : Type → Type
    = λ t . t
in
id (Type → Type) typid

----

def id
    : (A : Type) → A → A
    = λ A x . x
in
def const
    : (A B : Type) → A → B → A
    = λ A B x y . x
in (* does this bother you?? *)
(   idConst = id ((C D : Type) → C → D → C) const
,   idTyp = (id Type Bool, id Type Type)
,   pair = (True, False)
,   idTrueFalse = id (Bool; Bool) (True, False)
)

(*
infers to (
        idConst     : (C : Type) → (D : Type) → C → D → C;
        idTyp       : (Type; Type);
        pair        : (Bool; Bool);
        idTrueFalse : (Bool; Bool)
)
*)