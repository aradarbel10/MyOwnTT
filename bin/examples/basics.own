def id : (A : Type) → A → A
       = λ A x . x;

#exec (id Type Bool, id Bool False);
#exec False;

def id
    : (A : Type) → A → A
    = λ A x . x;
def typid
    : Type → Type
    = λ t . t;
#exec id (Type → Type) typid;

def id
    : (A : Type) → A → A
    = λ A x . x;
def const
    : (A B : Type) → A → B → A
    = λ A B x y . x;

#exec record
    idConst = id ((C D : Type) → C → D → C) const;
    idTyp = (id Type Bool, id Type Type);
    pair = (True, False);
    idTrueFalse = id (Bool; Bool) (True, False);
end;

(*
infers to (
        idConst     : (C : Type) → (D : Type) → C → D → C;
        idTyp       : (Type; Type);
        pair        : (Bool; Bool);
        idTrueFalse : (Bool; Bool)
)
*)

def unit = sig end;
#infer unit;
def star = record end;
#check star #against unit;
#conv (λ u . u)
#and (λ _ . star)
#at unit → unit;